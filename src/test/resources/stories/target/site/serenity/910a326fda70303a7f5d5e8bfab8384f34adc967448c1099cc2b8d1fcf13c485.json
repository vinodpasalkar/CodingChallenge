{"name":"Write a test that would validate new item addition using POST and the response\nreturns all the items.","id":"stories/APIScenarios.story;Write a test that would validate new item addition using POST and the response\nreturns all the items.","testSteps":[{"number":1,"description":"Given I add a new city {PAC}","duration":21547,"startTime":"2019-12-01T20:44:40.189Z[Europe/London]","result":"SUCCESS","precondition":false,"level":0},{"number":2,"description":"When I get all the items","duration":0,"startTime":"2019-12-01T20:45:01.744Z[Europe/London]","precondition":false,"level":0,"children":[{"number":3,"description":"Get all items","duration":11,"startTime":"2019-12-01T20:45:01.833Z[Europe/London]","exception":{"errorType":"com.github.tomakehurst.wiremock.common.FatalStartupException","message":"java.lang.RuntimeException: java.io.IOException: Failed to bind to /0.0.0.0:8080","stackTrace":[{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":148},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}],"rootCause":{"errorType":"java.lang.RuntimeException","message":"java.io.IOException: Failed to bind to /0.0.0.0:8080","stackTrace":[{"declaringClass":"com.github.tomakehurst.wiremock.jetty9.JettyHttpServer","methodName":"start","fileName":"JettyHttpServer.java","lineNumber":184},{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":146},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}],"rootCause":{"errorType":"java.io.IOException","message":"Failed to bind to /0.0.0.0:8080","stackTrace":[{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"openAcceptChannel","fileName":"ServerConnector.java","lineNumber":346},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"open","fileName":"ServerConnector.java","lineNumber":308},{"declaringClass":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"doStart","fileName":"AbstractNetworkConnector.java","lineNumber":80},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"doStart","fileName":"ServerConnector.java","lineNumber":236},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"org.eclipse.jetty.server.Server","methodName":"doStart","fileName":"Server.java","lineNumber":396},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"com.github.tomakehurst.wiremock.jetty9.JettyHttpServer","methodName":"start","fileName":"JettyHttpServer.java","lineNumber":182},{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":146},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}],"rootCause":{"errorType":"java.net.BindException","message":"Address already in use","stackTrace":[{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"openAcceptChannel","fileName":"ServerConnector.java","lineNumber":342},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"open","fileName":"ServerConnector.java","lineNumber":308},{"declaringClass":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"doStart","fileName":"AbstractNetworkConnector.java","lineNumber":80},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"doStart","fileName":"ServerConnector.java","lineNumber":236},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"org.eclipse.jetty.server.Server","methodName":"doStart","fileName":"Server.java","lineNumber":396},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"com.github.tomakehurst.wiremock.jetty9.JettyHttpServer","methodName":"start","fileName":"JettyHttpServer.java","lineNumber":182},{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":146},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}]}}}},"result":"ERROR","precondition":false,"level":1},{"number":4,"description":"Then City {LON} should be present in it","duration":3,"startTime":"2019-12-01T20:45:01.858Z[Europe/London]","result":"SKIPPED","precondition":false,"level":1},{"number":5,"description":"Then City {MAN} should be present in it","duration":1,"startTime":"2019-12-01T20:45:01.862Z[Europe/London]","result":"SKIPPED","precondition":false,"level":1},{"number":6,"description":"Then City {CAM} should be present in it","duration":1,"startTime":"2019-12-01T20:45:01.864Z[Europe/London]","result":"SKIPPED","precondition":false,"level":1},{"number":7,"description":"Then City {LCS} should be present in it","duration":1,"startTime":"2019-12-01T20:45:01.866Z[Europe/London]","result":"SKIPPED","precondition":false,"level":1},{"number":8,"description":"Then City {PAC} should be present in it","duration":1,"startTime":"2019-12-01T20:45:01.868Z[Europe/London]","result":"SKIPPED","precondition":false,"level":1}]}],"userStory":{"id":"APIScenarios","storyName":"API scenarios","path":"APIScenarios.story","narrative":"As a user\nI want to perform an action\nSo that I can achieve a business goal","type":"story"},"featureTag":{"name":"API scenarios","type":"story","displayName":"API scenarios"},"title":"Write a test that would validate new item addition using POST and the response\nreturns all the items.","tags":[{"name":"Api Scenarios","type":"story","displayName":"Api Scenarios"}],"startTime":"2019-12-01T20:44:40.172Z[Europe/London]","duration":21708,"testFailureCause":{"errorType":"java.lang.RuntimeException","message":"java.io.IOException: Failed to bind to /0.0.0.0:8080","stackTrace":[{"declaringClass":"com.github.tomakehurst.wiremock.jetty9.JettyHttpServer","methodName":"start","fileName":"JettyHttpServer.java","lineNumber":184},{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":146},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}],"rootCause":{"errorType":"java.io.IOException","message":"Failed to bind to /0.0.0.0:8080","stackTrace":[{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"openAcceptChannel","fileName":"ServerConnector.java","lineNumber":346},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"open","fileName":"ServerConnector.java","lineNumber":308},{"declaringClass":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"doStart","fileName":"AbstractNetworkConnector.java","lineNumber":80},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"doStart","fileName":"ServerConnector.java","lineNumber":236},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"org.eclipse.jetty.server.Server","methodName":"doStart","fileName":"Server.java","lineNumber":396},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"com.github.tomakehurst.wiremock.jetty9.JettyHttpServer","methodName":"start","fileName":"JettyHttpServer.java","lineNumber":182},{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":146},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}],"rootCause":{"errorType":"java.net.BindException","message":"Address already in use","stackTrace":[{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"openAcceptChannel","fileName":"ServerConnector.java","lineNumber":342},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"open","fileName":"ServerConnector.java","lineNumber":308},{"declaringClass":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"doStart","fileName":"AbstractNetworkConnector.java","lineNumber":80},{"declaringClass":"org.eclipse.jetty.server.ServerConnector","methodName":"doStart","fileName":"ServerConnector.java","lineNumber":236},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"org.eclipse.jetty.server.Server","methodName":"doStart","fileName":"Server.java","lineNumber":396},{"declaringClass":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","fileName":"AbstractLifeCycle.java","lineNumber":68},{"declaringClass":"com.github.tomakehurst.wiremock.jetty9.JettyHttpServer","methodName":"start","fileName":"JettyHttpServer.java","lineNumber":182},{"declaringClass":"com.github.tomakehurst.wiremock.WireMockServer","methodName":"start","fileName":"WireMockServer.java","lineNumber":146},{"declaringClass":"net.webtestautomation.dataModel.APIDataModel","methodName":"\u003cinit\u003e","fileName":"APIDataModel.java","lineNumber":31},{"declaringClass":"net.webtestautomation.tests.APITests","methodName":"getAllItems","fileName":"APITests.java","lineNumber":30},{"declaringClass":"net.webtestautomation.definitions.APIScenariosStepsDefinitions","methodName":"fetchAllItems","fileName":"APIScenariosStepsDefinitions.java","lineNumber":17}]}}},"testFailureClassname":"java.lang.RuntimeException","testFailureMessage":"java.io.IOException: Failed to bind to /0.0.0.0:8080","testFailureSummary":"ERROR;java.lang.RuntimeException;java.io.IOException: Failed to bind to /0.0.0.0:8080;JettyHttpServer.java","projectKey":"","annotatedResult":"ERROR","manual":false,"testSource":"JBehave","result":"ERROR"}